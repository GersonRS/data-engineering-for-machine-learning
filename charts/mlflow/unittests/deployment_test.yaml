suite: test deployment

templates:
  - deployment.yaml

tests:
  - it: should be custom service account when we do not create it
    set:
      serviceAccount.create: false
      serviceAccount.name: customsa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: customsa

  - it: should be a memory backend when Postgres or MySQL are not enabled
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[3]
          value: --backend-store-uri=sqlite:///:memory

  - it: should be Postgres backend when Postgres is enabled
    set:
      backendStore.postgres.enabled: true
      backendStore.postgres.driver: ""
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[3]
          value: --backend-store-uri=postgresql://

  - it: should use DB connection driver with Postgres backend when Postgres is enabled and driver defined
    set:
      backendStore.postgres.enabled: true
      backendStore.postgres.driver: "psycopg2"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[3]
          value: --backend-store-uri=postgresql+psycopg2://

  - it: should be MySQL backend when MySQL is enabled
    set:
      backendStore.mysql.enabled: true
      backendStore.mysql.driver: ""
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[3]
          value: --backend-store-uri=mysql://$(MYSQL_USERNAME):$(MYSQL_PWD)@$(MYSQL_HOST):$(MYSQL_TCP_PORT)/$(MYSQL_DATABASE)

  - it: should use DB connection driver with MySQL backend when MySQL is enabled and driver defined
    set:
      backendStore.mysql.enabled: true
      backendStore.mysql.driver: "pymysql"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[3]
          value: --backend-store-uri=mysql+pymysql://$(MYSQL_USERNAME):$(MYSQL_PWD)@$(MYSQL_HOST):$(MYSQL_TCP_PORT)/$(MYSQL_DATABASE)

  - it: should be local folder as an artifact root when azureBlob or s3 or gcs is not enabled
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --default-artifact-root=./mlruns

  - it: should be azureBlob as an artifact root when azureBlob is enabled
    set:
      artifactRoot.azureBlob.enabled: true
      artifactRoot.azureBlob.container: test-container
      artifactRoot.azureBlob.storageAccount: test-account
      artifactRoot.azureBlob.path: mlflow_folder
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --default-artifact-root=wasbs://test-container@test-account.blob.core.windows.net/mlflow_folder

  - it: should be s3 as an artifact root when s3 is enabled
    set:
      artifactRoot.s3.enabled: true
      artifactRoot.s3.bucket: test-bucket
      artifactRoot.s3.path: mlflow_folder
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --default-artifact-root=s3://test-bucket/mlflow_folder

  - it: should be gcs as an artifact root when gcs is enabled
    set:
      artifactRoot.gcs.enabled: true
      artifactRoot.gcs.bucket: test-bucket
      artifactRoot.gcs.path: mlflow_folder
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --default-artifact-root=gs://test-bucket/mlflow_folder

  - it: should be local folder as an artifact destination when proxy enabled and azureBlob or s3 or gcs is not enabled
    set:
      artifactRoot.proxiedArtifactStorage: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --artifacts-destination=./mlartifacts
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --serve-artifacts

  - it: should be azureBlob as an artifact destination when proxy enabled and azureBlob is enabled
    set:
      artifactRoot.proxiedArtifactStorage: true
      artifactRoot.azureBlob.enabled: true
      artifactRoot.azureBlob.container: test-container
      artifactRoot.azureBlob.storageAccount: test-account
      artifactRoot.azureBlob.path: mlflow_folder
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --artifacts-destination=wasbs://test-container@test-account.blob.core.windows.net/mlflow_folder
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --serve-artifacts

  - it: should be s3 as an artifact destination when proxy enabled and s3 is enabled
    set:
      artifactRoot.proxiedArtifactStorage: true
      artifactRoot.s3.enabled: true
      artifactRoot.s3.bucket: test-bucket
      artifactRoot.s3.path: mlflow_folder
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --artifacts-destination=s3://test-bucket/mlflow_folder
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --serve-artifacts

  - it: should be gcs as an artifact destination when proxy enabled and gcs is enabled
    set:
      artifactRoot.proxiedArtifactStorage: true
      artifactRoot.gcs.enabled: true
      artifactRoot.gcs.bucket: test-bucket
      artifactRoot.gcs.path: mlflow_folder
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[4]
          value: --artifacts-destination=gs://test-bucket/mlflow_folder
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --serve-artifacts

  - it: should expose prometheus metrics when serviceMonitor is enabled
    set:
      serviceMonitor.enabled: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --expose-prometheus=/mlflow/metrics

  - it: should show extra arguments when we pass any
    set:
      extraArgs:
        workers: "4"
        staticPrefix: "/mlflow"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[6]
          value: --workers=4
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --static-prefix=/mlflow

  - it: should show extra flags when we pass any
    set:
      extraFlags:
        - serveArtifacts
        - artifactsOnly
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[5]
          value: --serve-artifacts
      - equal:
          path: spec.template.spec.containers[0].args[6]
          value: --artifacts-only

  - it: should show mlflow version environment variable
    chart:
      version: 0.1.62
      appVersion: 1.27.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: MLFLOW_VERSION
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: "1.27.0"

  - it: should show extra environment variables when we pass any
    set:
      extraEnvVars:
         MLFLOW_S3_IGNORE_TLS: true
         AWS_DEFAULT_REGION: eu-central-1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[2].name
          value: MLFLOW_S3_IGNORE_TLS
      - equal:
          path: spec.template.spec.containers[0].env[2].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[1].name
          value: AWS_DEFAULT_REGION
      - equal:
          path: spec.template.spec.containers[0].env[1].value
          value: eu-central-1

  - it: should show extra secret environment variables from secrets when we pass any
    set:
      extraSecretNamesForEnvFrom:
        - mysupersecret
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[2].secretRef.name
          value: mysupersecret

  - it: should check liveness and rediness with static prefix when we set static prefix from extra arguments
    set:
      extraArgs:
        staticPrefix: /mlflow
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /mlflow
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /mlflow

  - it: should check that the db checker init container is present if enabled with postgres
    set:
      backendStore:
        databaseConnectionCheck: true
        postgres:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: dbchecker

  - it: should check that the db checker init container is present if enabled with mysql
    set:
      backendStore:
        databaseConnectionCheck: true
        mysql:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: dbchecker

  - it: should check that the db checker and additional init containers are present with postgres
    set:
      initContainers:
        - name: init-container-test
          image: test:3.2
          command:
            - sleep
            - infinity
      backendStore:
        databaseConnectionCheck: true
        postgres:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: dbchecker
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: init-container-test

  - it: should check that the db checker and additional init containers are present with mysql
    set:
      initContainers:
        - name: init-container-test
          image: test:3.2
          command:
            - sleep
            - infinity
      backendStore:
        databaseConnectionCheck: true
        mysql:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: dbchecker
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: init-container-test

  - it: should have a DB migration init container present if enabled with PostgreSQL
    set:
      backendStore:
        databaseMigration: true
        postgres:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: mlflow-db-migration

  - it: should have a DB migration init container present if enabled with MySQL
    set:
      backendStore:
        databaseMigration: true
        mysql:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: mlflow-db-migration

  - it: should have a DB migration init container and additional init containers are present with PostgreSQL
    set:
      initContainers:
        - name: init-container-test
          image: test:3.2
          command:
            - sleep
            - infinity
      backendStore:
        databaseMigration: true
        postgres:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: mlflow-db-migration
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: init-container-test

  - it: should have a DB migration init container and additional init containers are present with MySQL
    set:
      initContainers:
        - name: init-container-test
          image: test:3.2
          command:
            - sleep
            - infinity
      backendStore:
        databaseMigration: true
        mysql:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: mlflow-db-migration
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: init-container-test

  - it: should have a DB checker init container, DB migration init container and additional init containers are present with PostgreSQL
    set:
      initContainers:
        - name: init-container-test
          image: test:3.2
          command:
            - sleep
            - infinity
      backendStore:
        databaseConnectionCheck: true
        databaseMigration: true
        postgres:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: dbchecker
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: mlflow-db-migration
      - equal:
          path: spec.template.spec.initContainers[2].name
          value: init-container-test

  - it: should have a DB checker init container, DB migration init container and additional init containers are present with MySQL
    set:
      initContainers:
        - name: init-container-test
          image: test:3.2
          command:
            - sleep
            - infinity
      backendStore:
        databaseConnectionCheck: true
        databaseMigration: true
        mysql:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: dbchecker
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: mlflow-db-migration
      - equal:
          path: spec.template.spec.initContainers[2].name
          value: init-container-test

  - it: should set liveness probe configurations when we pass it
    set:
      livenessProbe:
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 0
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 1
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.failureThreshold
          value: 3

  - it: should set readiness probe configurations when we pass it
    set:
      readinessProbe:
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 0
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.timeoutSeconds
          value: 1
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.failureThreshold
          value: 3

  - it: should use different port number when we change it
    set:
      service.port: 80
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args[2]
          value: --port=80
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 80

  - it: should use different port name when we change it
    set:
      service.name: differentname
    asserts:
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: differentname
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: differentname
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: differentname

  - it: should match snapshot of default values
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should match snapshot with additional values
    set:
      backendStore:
        databaseMigration: true
        databaseConnectionCheck: true
        postgres:
          enabled: true
          host: test-host
          database: test-database
          user: test-user
          password: test-password
      podAnnotations:
        test-key: test-value
      podSecurityContext:
        fsGroup: 2000
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
        - name: init-myservice
          image: busybox:1.28
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      extraVolumeMounts:
        - name: mlflow-volume
          mountPath: /mlflow/data
        - name: example
          mountPath: /example
      extraVolumes:
        - name: mlflow-volume
          persistentVolumeClaim:
            claimName: mlflow-pv-volume
        - name: example
          configMap:
            name: example
      nodeSelector:
        disktype: ssd
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/e2e-az-name
                    operator: In
                    values:
                      - e2e-az1
                      - e2e-az2
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: custom-key
                    operator: In
                    values:
                      - custom-value
      tolerations:
        - key: "example-key"
          operator: "Exists"
          effect: "NoSchedule"
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }
