---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ .Values.kafka.name }}
  labels:
    {{- include "modern-gitops-stack-module-kafka.labels" $ | indent 4 }}
spec:
  kafka:
    version: {{ .Values.kafka.version }}
    replicas: {{ .Values.kafka.replicas }}
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        type: loadbalancer
        tls: false
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    config:
    # Report and UI for Cruise Control
      metric.reporters: "com.linkedin.kafka.cruisecontrol.metricsreporter.CruiseControlMetricsReporter"
      auto.create.topics.enable: "false"
      offsets.topic.replication.factor: {{ .Values.kafka.replicas }}
      transaction.state.log.replication.factor: {{ .Values.kafka.replicas }}
      transaction.state.log.min.isr: 1
      default.replication.factor: {{ .Values.kafka.replicas }}
      min.insync.replicas: 1
      log.message.format.version: {{ .Values.kafka.versionProtocol }}
      inter.broker.protocol.version: {{ .Values.kafka.versionProtocol }}
    storage:
      type: ephemeral
    resources:
      requests:
        memory: 256Mi
        cpu: "250m"
      limits:
        memory: 512Mi
        cpu: "500m"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
  zookeeper:
    replicas: {{ .Values.kafka.replicas }}
    storage:
      type: ephemeral
    livenessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 5
    resources:
      requests:
        memory: 256Mi
        cpu: "250m"
      limits:
        memory: 512Mi
        cpu: "500m"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: zookeeper-metrics
          key: zookeeper-metrics-config.yml
  entityOperator:
    topicOperator: {}
    userOperator: {}
  cruiseControl:
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: cruise-control-metrics
          key: metrics-config.yml
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
